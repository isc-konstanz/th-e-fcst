#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
    th-e-forecast
    ~~~~~
    
"""
import logging.config

import sys
import os
from boto import config
from pygments.lexers import configs
from theforecast.database import CsvDatabase
sys.path.insert(0, os.path.dirname(os.path.abspath(sys.argv[0])))

from argparse import ArgumentParser
from configparser import ConfigParser
import json
import shutil
import inspect
import matplotlib.pyplot as plt
from keras.models import load_model
import numpy as np
import time
from scipy import signal


def main(rundir, args=None):
    from theforecast import Forecast, ForecastException
    from theforecast.neuralnetwork import NeuralNetwork
    
    # Parameter:
    nTrainingDays = 30
    nInputDays = 7
    
    if args.configs != None:
        configs = args.configs
        logger.debug('System configurations will be read in from "%s"', configs)
    else:
        configs = os.path.join(rundir, 'conf')
    
    # load prediction class  
    system = Forecast(configs)
    data = system.databases['CSV'].data

    iStart = (nTrainingDays - nInputDays) * 1440
    dataTraining = [data[0][iStart:],  # BI
                    data[1][iStart:],  # DT
                    data[2][iStart:]]  # Season
    
    X, Y = system.neuralnetwork.getInputVector(dataTraining,
                                               system.neuralnetwork.lookBack,
                                               system.neuralnetwork.lookAhead,
                                               system.neuralnetwork.fMin,
                                               training=True)
    
    load_model_conf = True
    if load_model_conf:
         system.neuralnetwork.model = load_model('myModel')
         # system.neuralnetwork.model.fit(X, Y, epochs=1, batch_size=64, verbose=2)
    if not load_model_conf:
        system.neuralnetwork.model.fit(X, Y, epochs=5, batch_size=64, verbose=2)
        system.neuralnetwork.model.save('myModel')
    # TODO: safe model under the config path
    k = 0
    pred_start = 50 * 1440
    while True:           
        try:
            input, prediction = system.execute(pred_start, k)
            k = k + system.neuralnetwork.fMin
        except (ForecastException) as e:
            logger.error('Fatal forecast error: %s', str(e))
            sys.exit(1)  # abnormal termination
        
        # system.databases['CSV'].persist(prediction)
        
        plt.figure(1)
        plt.clf()
        bi = (system.databases['CSV'].data[0][pred_start - 7 * 1440 + k:pred_start + 1440 + k] + 1) / 2
        b, a = signal.butter(8, 0.01)  # lowpass filter of order = 8 and critical frequency = 0.01 (-3dB)
        bi = signal.filtfilt(b, a, bi, padlen=150)
        
        plt.plot(np.linspace(50 + k / 1440, 58 + k / 1440, 8 * 1440), bi, 'k--')
        plt.plot(np.linspace(50 + k / 1440, 55 + k / 1440, 120), input[0, 0, 0:120], 'r--')
        plt.plot(np.linspace(55 + k / 1440, 56.9166 + k / 1440, 184), input[0, 0, 120:304], 'r')
        plt.plot(np.linspace(56.9166 + k / 1440, 57 + k / 1440, 24), input[0, 0, 304:], 'g')
        plt.plot(np.linspace(57 + k / 1440, 58 + k / 1440, int(system.neuralnetwork.lookAhead / system.neuralnetwork.fMin)), prediction[0, :, :].transpose(), 'b')
        plt.grid()
        plt.xlim([53 + k / 1440, 58.2 + k / 1440])
        plt.pause(0.1)
        plt.savefig('plots\\name' + str(k))
        
        time.sleep(1)
            
    sys.exit(0)  # successful termination


if __name__ == '__main__':

    rundir = os.path.dirname(os.path.abspath(inspect.getsourcefile(main)))
    if os.path.basename(rundir) == 'bin':
        rundir = os.path.dirname(rundir)
    
    # Load the logging configuration
    logging.config.fileConfig(os.path.join(rundir, 'conf', 'logging.cfg'))
    logger = logging.getLogger('th-e-forecast')
    
    parser = ArgumentParser(description=__doc__)
    parser.add_argument('-c', '--configs',
                        dest='configs',
                        help='Directory of system configuration files',
                        metavar='DIR')
    
    main(rundir, args=parser.parse_args())

