#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
    th-e-fcst
    ~~~~~~~~~

    To learn how to configure the prediction of timeseries, see "th-e-fcst --help"

"""
import os
import shutil
import inspect
import datetime as dt

from argparse import ArgumentParser, RawTextHelpFormatter
from configparser import ConfigParser


def main(args):
    from th_e_core import configs
    from th_e_fcst import System

    settings = configs.read('settings.cfg', **vars(args))

    kwargs = vars(args)
    kwargs.update(settings.items('General'))
    
    systems = System.read(**kwargs)
    if args.action == 'run':
        systems.run()
    
    elif args.action == 'start':
        start(systems, **kwargs)


def start(systems, interval=1, **kwargs):
    import time
    import sched
    
    logger.info('Starting th-e-fcst')
    
    scheduler = sched.scheduler(time.time, time.sleep)
    schedule_first, _ = schedule_date(interval, **kwargs)
    schedule_first -= dt.timedelta(seconds=int(interval))
    schedule_run(systems, scheduler, schedule_first, interval)
    scheduler.run()


def schedule_run(systems, scheduler, date, interval, **kwargs):
    logger.info("Running th-e-fcst for {0} systems".format(len(systems)))
    
    for system in systems:
        system.run(start=date)
    
    date, delay = schedule_date(interval, **kwargs)
    scheduler.enter(delay, 1, schedule_run,
                    (systems, scheduler, date, interval))
    
    logger.info("Schedule next execution in {0} seconds: {1}".format(round(delay), date))


def schedule_date(interval, delay=0, **_):
    if isinstance(interval, str):
        interval = int(interval)
    
    now = dt.datetime.now()
    date = now + ((dt.datetime.min - now) % dt.datedelta(seconds=interval))
    
    return date, (date - now).total_seconds() + int(delay)


def _get_parser(root_dir):
    from th_e_fcst import __version__
    
    parser = ArgumentParser(description=__doc__, formatter_class=RawTextHelpFormatter)
    parser.add_argument('-v', '--version',
                        action='version',
                        version='%(prog)s {version}'.format(version=__version__))
    
    subparsers = parser.add_subparsers(dest='action')
    subparsers.required = True
    subparsers.add_parser('run', help='Retrieve weather information and provide the calculated photovoltaic yield')
    subparsers.add_parser('start', help='Starts the ongoing calculation of photovoltaic yield in a regular interval')
    
    parser.add_argument('-r', '--root-directory',
                        dest='root_dir',
                        help="directory where the package and related libraries are located",
                        default=root_dir,
                        metavar='DIR')

    parser.add_argument('-c', '--config-directory',
                        dest='config_dir',
                        help="directory to expect configuration files",
                        default='conf',
                        metavar='DIR')

    parser.add_argument('-d', '--data-directory',
                        dest='data_dir',
                        help="directory to expect and write result files to",
                        default='data',
                        metavar='DIR')
    
    return parser


if __name__ == "__main__":
    run_dir = os.path.dirname(os.path.abspath(inspect.getsourcefile(main)))
    if os.path.basename(run_dir) == 'bin':
        run_dir = os.path.dirname(run_dir)

    os.chdir(run_dir)

    os.environ['NUMEXPR_MAX_THREADS'] = str(os.cpu_count())

    if not os.path.exists('log'):
        os.makedirs('log')

    logging_file = os.path.join(os.path.join(run_dir, 'conf'), 'logging.cfg')
    if not os.path.isfile(logging_file):
        logging_default = logging_file.replace('logging.cfg', 'logging.default.cfg')
        if os.path.isfile(logging_default):
            shutil.copy(logging_default, logging_file)
        else:
            raise FileNotFoundError("Unable to open logging.cfg in: " +
                                    os.path.join(os.path.join(run_dir, 'conf')))

    # Load the logging configuration
    import logging
    import logging.config
    logging.config.fileConfig(logging_file)
    logger = logging.getLogger('th-e-fcst')

    main(_get_parser(run_dir).parse_args())
