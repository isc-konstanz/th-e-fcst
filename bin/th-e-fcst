#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
    th-e-fcst
    ~~~~~~~~~
    
    To learn how to configure the prediction of timeseries, see "th-e-fcst --help"

"""
import logging.config

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(sys.argv[0])))

import inspect
import pytz as tz
import datetime as dt

from argparse import ArgumentParser, RawTextHelpFormatter
from configparser import ConfigParser


def main(args):
    from th_e_fcst import System
    
    settings_file = os.path.join(args.config_dir, 'settings.cfg')
    if not os.path.isfile(settings_file):
        raise ValueError('Unable to open simulation settings: {}'.format(settings_file))
    
    settings = ConfigParser()
    settings.read(settings_file)
    
    kwargs = vars(args)
    kwargs.update(dict(settings.items('General')))
    
    interval = settings.getint('General', 'interval')
    
    systems = System.read(**kwargs)
    if args.action == 'run':
        time = _get_time(dt.datetime.now(), interval)
        systems.run(time)
    
    elif args.action == 'start':
        for system in systems:
            start(system, interval)

def start(system, interval):
    import sched, time
    
    logger.info('Starting th-e-fcst')
    
    scheduler = sched.scheduler(time.time, time.sleep)
    schedule_first, _ = schedule_time(system, interval)
    schedule_first -= dt.timedelta(seconds=system._forecast.interval)
    schedule_run(system, scheduler, schedule_first, interval)
    scheduler.run()

def schedule_run(system, scheduler, time, interval):
    system.run(time)
    
    time, delay = schedule_time(system, interval)
    scheduler.enter(delay, 1, schedule_run,
                    (system, scheduler, time, interval))

def schedule_time(system, interval):
    now = dt.datetime.now(system._location.pytz)
    time = _get_time(now)
    return time, (time + dt.timedelta(minutes=interval) - now).total_seconds() + system._forecast.delay

def _get_time(time, interval):
    interval_mins = interval % 60
    interval_hour = int((interval - interval_mins)/60)
    
    time = time.replace(second=0, microsecond=0)
    if interval_mins > 0:
        if time.minute % interval_mins != 0:
            time = time + dt.timedelta(minutes=interval_mins) - dt.timedelta(minutes=time.minute % (interval_mins))
    else:
        time = time.replace(minute=0)
    
    if interval_hour > 0:
        if time.hour % interval_hour != 0:
            time = time + dt.timedelta(hours=interval_hour) - dt.timedelta(hours=time.hour % interval_hour)
    
    return time


def _get_parser(root_dir, config_dir):
    from th_e_fcst import __version__
    
    parser = ArgumentParser(description=__doc__, formatter_class=RawTextHelpFormatter)
    parser.add_argument('-v', '--version',
                         action='version',
                         version='%(prog)s {version}'.format(version=__version__))
    
    subparsers = parser.add_subparsers(dest='action')
    subparsers.required = True
    subparsers.add_parser('run', help='Retrieve weather information and provide the calculated photovoltaic yield')
    subparsers.add_parser('start', help='Starts the ongoing calculation of photovoltaic yield in a regular interval')
    
    parser.add_argument('-r','--root-directory',
                        dest='root_dir',
                        help="directory where the package and related libraries are located",
                        default=root_dir,
                        metavar='DIR')
    
    parser.add_argument('-c','--config-directory',
                        dest='config_dir',
                        help="directory to expect configuration files",
                        default=config_dir,
                        metavar='DIR')
    
    return parser

if __name__ == "__main__":
    root_dir = os.path.dirname(os.path.abspath(inspect.getsourcefile(main)))
    if os.path.basename(root_dir) == 'bin':
        root_dir = os.path.dirname(root_dir)
    
    os.chdir(root_dir)
    
    config_dir = os.path.join(root_dir, 'conf')
    
    # Load the logging configuration
    loggingfile = os.path.join(config_dir, 'logging.cfg')
    logging.config.fileConfig(loggingfile)
    logger = logging.getLogger('th_e_fcst')
    
    main(_get_parser(root_dir, config_dir).parse_args())

