[General]
# Specifies the model type of the neural network
model = ConvLSTM

# Training batch size and epochs
batch = 64
epochs = 1024

optimizer = adam
loss = logcosh
;metrics = mse

# The learning rate for Adam optimization
learning_rate = 0.0001

# Specifies whether a portion of input features should be used
# to validate the training process and stop early if possible
early_stopping = True
early_stopping_bins = week
early_stopping_split = 7
early_stopping_patience = 128

# Flags if the tensorboard callback should be used
tensorboard = True


[Resolution 1]
minutes = 180
steps_prior = 24
steps_horizon = 72

[Resolution 2]
minutes = 60
steps_prior = 24
steps_horizon = 36

[Resolution 3]
minutes = 15
steps_prior = 48
steps_horizon = 48


[Features]
;estimate = True

target  = [ "el_power",
            "pv_power" ]

input =   [ "pv_power_doubt",
            "ghi",
            "dni",
            "dhi",
            "temp_air",
            "wind_speed",
            "wind_direction",
            "humidity_rel",
            "pressure_sea",
            "total_clouds",
            "low_clouds",
            "mid_clouds",
            "high_clouds",
            "precipitation",
            "snow_fraction",
            "solar_elevation",
            "solar_zenith",
            "solar_azimuth",
            "hour_of_day",
            "day_of_week",
            "day_of_year",
            "holiday" ]

cyclic  = { "solar_azimuth": 360,
            "hour_of_day": 23,
            "day_of_week": 7,
            "day_of_year": 365 }

scaling = { "el_power": 6900,
            "pv_power": 6000,
            "pv_yield": 6000,
            "ghi": 1000,
            "dhi": 1000,
            "dni": 1000,
            "temp_air": 40,
            "wind_speed": 40,
            "precipitation": 10,
            "solar_elevation": 90,
            "solar_zenith": 180 }

doubt =   { "pv_power": "pv_yield" }

# Time interval in minutes, for which the rolling covariance of the doubt feature will be calculated
;doubt_interval = 60

[Yield]
aoi_model = no_loss
spectral_model = no_loss

[Conv1D]
filters = 64
layers = 5

activation = relu
kernel_size = 2
kernel_initializer = he_uniform

pool_size = 2

[LSTM]
units = 64
;layers = 1

activation = relu

[Dense]
units = 128
layers = 3
;dropout = 0.1

activation = relu
kernel_initializer = he_uniform

leaky_alpha = 1e-6
